# ===================================
# Go Executor 环境变量配置示例
# ===================================

# ----------------------
# Runtime 池配置
# ----------------------

# 初始 Runtime 池大小（默认：100）
# 实际会被自动调整到 MIN_RUNTIME_POOL_SIZE 和 MAX_RUNTIME_POOL_SIZE 之间
RUNTIME_POOL_SIZE=100

# 🔥 最小 Runtime 池大小（默认：50）
# 池动态收缩时不会低于此值
# 限制：
#   - 下限：10（强制最小值，低于此值会自动调整）
#   - 上限：无（但受 MAX_RUNTIME_POOL_SIZE 限制）
MIN_RUNTIME_POOL_SIZE=50

# 🔥 最大 Runtime 池大小（默认：200）
# 池动态扩展时不会超过此值
# 限制：
#   - 下限：MIN_RUNTIME_POOL_SIZE（如果小于最小值，会自动调整为 MIN * 2）
#   - 上限：500（硬限制，防止内存溢出，超过会自动调整）
# 内存估算：
#   - 每个 Runtime ≈ 3-5MB（包括 VM + 嵌入库）
#   - 200 个 ≈ 1GB（推荐）
#   - 500 个 ≈ 2.5GB（上限）
# 自动调整规则：
#   - 如果小于 MIN_RUNTIME_POOL_SIZE，会设为 MIN_RUNTIME_POOL_SIZE * 2
#   - 如果超过 500，会调整为 500
MAX_RUNTIME_POOL_SIZE=200

# 🔥 Runtime 空闲超时时间（单位：分钟，默认：5）
# 超过此时间未使用的 Runtime 会在健康检查时被释放
RUNTIME_IDLE_TIMEOUT_MIN=5

# ----------------------
# 并发控制
# ----------------------

# 最大并发执行数（默认：1000）
MAX_CONCURRENT_EXECUTIONS=1000

# ----------------------
# 代码执行限制
# ----------------------

# 最大代码长度（字节，默认：65535 = 64KB）
MAX_CODE_LENGTH=65535

# 最大输入大小（字节，默认：2097152 = 2MB）
MAX_INPUT_SIZE=2097152

# 最大结果大小（字节，默认：5242880 = 5MB）
MAX_RESULT_SIZE=5242880

# 代码执行超时时间（毫秒，默认：300000 = 300秒 = 5分钟）
# ⚠️ 注意：此值同时控制 HTTP ReadTimeout 和 WriteTimeout
# 建议值：
#   - 快速任务：10000 (10秒)
#   - 普通任务：60000 (1分钟)
#   - 长时间任务：300000 (5分钟)
#   - 大文件上传：600000 (10分钟)
EXECUTION_TIMEOUT_MS=300000

# ----------------------
# 缓存配置
# ----------------------

# 代码缓存大小（默认：100）
# LRU 缓存，存储编译后的 JavaScript 代码
CODE_CACHE_SIZE=100

# ----------------------
# 运行环境配置
# ----------------------

# 运行环境（默认：production）
# 可选值：development | production
# 影响：
#   - development：允许 console 输出，日志更详细（彩色输出）
#   - production：禁止 console 输出，日志简洁（JSON 格式）
ENVIRONMENT=production

# 是否允许用户代码使用 console（可选）
# 可选值：true/false, 1/0, yes/no, on/off
# 默认值：
#   - development 环境：true（允许，便于调试）
#   - production 环境：false（禁止，提升性能）
# 说明：
#   - 当设置此变量时，会覆盖 ENVIRONMENT 的默认行为
#   - 建议生产环境不启用，避免性能开销
# 示例：
#   ALLOW_CONSOLE=true   # 显式允许 console
#   ALLOW_CONSOLE=false  # 显式禁止 console
#   ALLOW_CONSOLE=1      # 等同于 true
#   ALLOW_CONSOLE=0      # 等同于 false
# ALLOW_CONSOLE=true

# ----------------------
# 网络配置
# ----------------------

# Fetch API 超时时间（毫秒，默认：30000 = 30秒）
FETCH_TIMEOUT_MS=30000

# ----------------------
# FormData 流式处理配置（v3.0 新增）
# ----------------------

# FormData 缓冲区大小（字节，默认：2097152 = 2MB）
# 控制 FormData 流式上传时的缓冲区大小
# 建议值：
#   - 小文件为主：524288 (512KB)
#   - 平衡性能：2097152 (2MB) - 默认
#   - 大文件上传：4194304 (4MB)
#   - 极限性能：8388608 (8MB)
FORMDATA_BUFFER_SIZE=2097152

# FormData 最大大小（MB，默认：100）
# 控制整个 FormData 请求的总大小上限（包括所有文件和字段）
# 防止恶意上传超大文件
MAX_FORMDATA_SIZE_MB=100

# 单文件最大大小（MB，默认：50）
# 控制 FormData 中单个文件的大小上限
# ⚠️ 注意：通常设置为 MAX_FORMDATA_SIZE_MB 的一半，确保能上传至少 2 个文件
# 建议值：
#   - 小文件场景：25 (MB)
#   - 平衡场景：50 (MB) - 默认
#   - 大文件场景：100-200 (MB)
MAX_FILE_SIZE_MB=50

# 流式处理阈值（MB，默认：1）
# 大于此值的 FormData 使用流式模式（省内存）
# 小于此值的 FormData 使用缓冲模式（更快）
FORMDATA_STREAMING_THRESHOLD_MB=1

# 启用分块上传（默认：1）
# 1 = 启用 Transfer-Encoding: chunked
# 0 = 禁用，使用 Content-Length
ENABLE_CHUNKED_UPLOAD=1

# Blob/File 对象最大大小（MB，默认：100）
# 限制单个 Blob 或 File 对象的最大大小，防止内存溢出
MAX_BLOB_FILE_SIZE_MB=100

# 推荐配置：
# - 开发环境：MAX_FORMDATA_SIZE_MB=50, MAX_FILE_SIZE_MB=25, THRESHOLD=1, MAX_BLOB_FILE_SIZE_MB=50
# - 生产环境：MAX_FORMDATA_SIZE_MB=200, MAX_FILE_SIZE_MB=100, THRESHOLD=0.5, MAX_BLOB_FILE_SIZE_MB=200
# - 大文件场景：MAX_FORMDATA_SIZE_MB=500, MAX_FILE_SIZE_MB=250, THRESHOLD=0.5, MAX_BLOB_FILE_SIZE_MB=500

# ----------------------
# 动态池行为说明
# ----------------------

# 扩展触发条件：
# - 可用 Runtime < 当前池大小的 10%
# - 当前池大小 < MAX_RUNTIME_POOL_SIZE
# 扩展策略：每次扩展当前池大小的 20%，最少 5 个

# 收缩触发条件：
# - 当前池大小 > MIN_RUNTIME_POOL_SIZE
# - 空闲 Runtime 数量 > 5
# - Runtime 空闲时间 > RUNTIME_IDLE_TIMEOUT_MIN
# 收缩策略：每次最多释放空闲 Runtime 的一半，最多 10 个

# 自动修复触发条件：
# - 错误率 > 10%
# - 错误次数 > 10
# 修复策略：立即重建问题 Runtime

# 健康检查间隔：30 秒（硬编码）

# ----------------------
# 推荐配置
# ----------------------

# 低负载场景（开发/测试环境）
# MIN_RUNTIME_POOL_SIZE=20
# MAX_RUNTIME_POOL_SIZE=50
# RUNTIME_IDLE_TIMEOUT_MIN=3

# 中等负载场景（小型生产环境）
# MIN_RUNTIME_POOL_SIZE=50
# MAX_RUNTIME_POOL_SIZE=150
# RUNTIME_IDLE_TIMEOUT_MIN=5

# 高负载场景（大型生产环境）
# MIN_RUNTIME_POOL_SIZE=100
# MAX_RUNTIME_POOL_SIZE=300
# RUNTIME_IDLE_TIMEOUT_MIN=10

# 极高负载场景（企业级）
# MIN_RUNTIME_POOL_SIZE=200
# MAX_RUNTIME_POOL_SIZE=500
# RUNTIME_IDLE_TIMEOUT_MIN=15
