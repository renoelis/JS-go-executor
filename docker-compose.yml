# Flow-CodeBlock Go版本 - 本地测试环境 Docker Compose配置
# 用于本地开发和测试
version: '3.8'

services:
  # ====================================================================================
  # Go 代码执行服务 (本地测试环境)
  # ====================================================================================
  flow-codeblock-go:
    build:
      context: .
      dockerfile: Dockerfile
    image: flow-codeblock-go:dev
    container_name: flow-codeblock-go-dev
    ports:
      - "3002:3002"
    
    environment:
      # ==================== 基础配置 ====================
      - ENVIRONMENT=development
      - PORT=3002
      - GIN_MODE=debug                   # 开发环境使用debug模式
      
      # 🔥 DoS 防护配置
      - MAX_REQUEST_BODY_MB=10           # HTTP 请求体大小限制（MB）
      
      # 🔒 CORS 跨域配置
      - ALLOWED_ORIGINS=                 # 为空则只允许服务端和同域调用
      
      # ==================== 数据库配置 ====================
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=flow_user
      - DB_PASSWORD=flow_password_dev    # 开发环境密码
      - DB_NAME=flow_codeblock_go
      - DB_MAX_OPEN_CONNS=50             # 🔧 开发环境减少连接数
      - DB_MAX_IDLE_CONNS=10
      - DB_CONN_MAX_LIFETIME_MIN=30
      - DB_CONN_MAX_IDLE_TIME_MIN=5
      
      # ==================== Redis配置 ====================
      - REDIS_ENABLED=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=flow_redis_dev    # 开发环境密码
      - REDIS_DB=0
      - REDIS_POOL_SIZE=50               # 🔧 开发环境减少连接数
      - REDIS_MIN_IDLE_CONNS=5
      - REDIS_DIAL_TIMEOUT_SEC=5
      - REDIS_READ_TIMEOUT_SEC=3
      - REDIS_WRITE_TIMEOUT_SEC=3
      - REDIS_MAX_RETRIES=3
      
      # ==================== 🔐 认证配置 ====================
      # 开发环境使用简单Token（16字符，不包含弱密码关键词）
      - ADMIN_TOKEN=${ADMIN_TOKEN:-devABCDEFGHJKLMN}
      
      # ==================== Token缓存配置 ====================
      - TOKEN_CACHE_HOT_SIZE=200         # 🔧 开发环境减少缓存
      - TOKEN_CACHE_HOT_TTL_MINUTES=3
      - TOKEN_CACHE_REDIS_TTL_MINUTES=30
      
      # ==================== 🔥 缓存写入池配置 ====================
      - CACHE_WRITE_POOL_WORKERS=5       # 🔧 开发环境减少worker
      - CACHE_WRITE_POOL_QUEUE_SIZE=500  # 🔧 开发环境减少队列
      - CACHE_WRITE_POOL_SUBMIT_TIMEOUT_MS=50
      
      # ==================== Token限流配置 ====================
      - RATE_LIMIT_HOT_SIZE=200          # 🔧 开发环境减少缓存
      - RATE_LIMIT_REDIS_TTL_MINUTES=30
      - RATE_LIMIT_BATCH_SIZE=50
      
      # ==================== 🔥 配额日志清理配置 ====================
      # 自动清理配额消耗日志，避免数据库膨胀
      - QUOTA_CLEANUP_ENABLED=true       # 是否启用自动清理（默认：true）
      - QUOTA_CLEANUP_RETENTION_DAYS=90  # 🔧 开发环境保留90天（生产环境推荐180天）
      - QUOTA_CLEANUP_INTERVAL_HOURS=24  # 清理间隔（小时，默认：24小时）
      - QUOTA_CLEANUP_BATCH_SIZE=10000   # 每批删除数量（默认：10000）
      
      # ==================== 🔥 配额同步配置 ====================
      # 功能：配置Redis到DB的配额同步策略
      # 说明：配额准确性由Redis原子操作保证，同步间隔只影响DB实时性
      - QUOTA_SYNC_QUEUE_SIZE=10000      # 同步队列容量（默认：10000）
      - QUOTA_LOG_QUEUE_SIZE=10000       # 日志队列容量（默认：10000）
      - QUOTA_SYNC_BATCH_SIZE=500        # 同步批次大小（默认：500）
      - QUOTA_SYNC_INTERVAL_MS=1000      # 同步间隔（毫秒，默认：1000，即1秒）
      
      # ==================== 🚦 IP限流配置 ====================
      # 开发环境使用较宽松的限流
      - IP_RATE_LIMIT_PRE_AUTH=100       # 开发环境更宽松
      - IP_RATE_LIMIT_PRE_AUTH_BURST=200
      - IP_RATE_LIMIT_POST_AUTH=500      # 开发环境更宽松
      - IP_RATE_LIMIT_POST_AUTH_BURST=1000
      - IP_RATE_LIMIT_GLOBAL=100
      - IP_RATE_LIMIT_GLOBAL_BURST=200
      
      # ==================== 🚀 JavaScript执行器配置 ====================
      # 开发环境配置（适合本地测试）
      - RUNTIME_POOL_SIZE=20             # 🔧 开发环境减少池大小
      - MIN_RUNTIME_POOL_SIZE=10
      - MAX_RUNTIME_POOL_SIZE=50
      - RUNTIME_IDLE_TIMEOUT_MIN=5
      - MAX_CONCURRENT_EXECUTIONS=200    # 🔧 开发环境减少并发
      - CODE_CACHE_SIZE=50
      - ALLOW_CONSOLE=true               # 🔧 开发环境允许console
      
      # 执行限制
      - MAX_CODE_LENGTH=65535            # 64KB
      - MAX_INPUT_SIZE=2097152           # 2MB
      - MAX_RESULT_SIZE=5242880          # 5MB
      - EXECUTION_TIMEOUT_MS=300000       # 🔧 开发环境30秒超时

      # ==================== 🛡️ SSRF 防护配置（开发环境）====================
      # 开发环境默认：禁用 SSRF 防护（允许访问内网服务）
      # 原因：本地开发需要访问数据库、微服务等内网资源
      - ENABLE_SSRF_PROTECTION=${ENABLE_SSRF_PROTECTION:-false}   # 开发环境默认禁用
      - ALLOW_PRIVATE_IP=${ALLOW_PRIVATE_IP:-true}                # 开发环境默认允许私有IP

       # ==================== 🔥 并发控制超时配置 ====================
      # 说明：控制系统繁忙时的等待行为
      - CONCURRENCY_WAIT_TIMEOUT_SEC=10  # 并发槽位等待超时(秒) - 默认 10 秒
      - RUNTIME_POOL_ACQUIRE_TIMEOUT_SEC=5  # Runtime 池获取超时(秒) - 默认 5 秒
      
      # ==================== 🔍 慢执行检测配置 ====================
      # SLOW_EXECUTION_THRESHOLD_MS: 慢执行检测阈值（毫秒）
      # 说明：超过此时间的代码执行会记录 WARN 日志，帮助定位性能问题
      - SLOW_EXECUTION_THRESHOLD_MS=3000  # 配置为 3 秒，
      
      # ==================== 🔥 熔断器配置 ====================
      - CIRCUIT_BREAKER_ENABLED=true
      - CIRCUIT_BREAKER_MIN_REQUESTS=50  # 🔧 开发环境降低阈值
      - CIRCUIT_BREAKER_FAILURE_RATIO=0.9
      - CIRCUIT_BREAKER_TIMEOUT_SEC=10
      - CIRCUIT_BREAKER_MAX_REQUESTS=50
      
      # ==================== Fetch API 超时配置 ====================
      # 🔥 拆分为两个独立参数（v2.5.3 新增）
      - FETCH_TIMEOUT_MS=30000                      # HTTP 请求超时（连接+发送+响应头，30秒）
      - FETCH_RESPONSE_READ_TIMEOUT_MS=600000       # 🔥 响应读取总时长超时（10分钟，开发环境宽松）
      
      # 🔥 下载限制（新方案）
      - MAX_RESPONSE_SIZE_MB=5           # 缓冲读取限制(arrayBuffer/blob/text/json) - 默认1MB
      - MAX_STREAMING_SIZE_MB=1        # 流式读取限制(getReader) - 默认100MB
      
      # 🔥 上传限制（新方案）
      - MAX_BUFFERED_FORMDATA_MB=5       # 缓冲上传限制(Web FormData + Blob、Node.js form-data + Buffer) - 默认1MB
      - MAX_STREAMING_FORMDATA_MB=5    # 流式上传限制(Node.js form-data + Stream) - 默认100MB
      
      # 其他配置
      - ENABLE_CHUNKED_UPLOAD=1          # 启用分块传输编码
      - MAX_BLOB_FILE_SIZE_MB=1          # Blob/File最大大小(MB)
      - FORMDATA_BUFFER_SIZE=524288      # FormData缓冲区大小(字节) - 512KB
      - MAX_FILE_SIZE_MB=1               # 单文件最大大小(MB)
      
      # 🔥 XLSX 模块配置（开发环境）
      - XLSX_MAX_SNAPSHOT_SIZE_MB=5      # Copy-on-Read 模式的最大文件大小（默认5MB，开发环境可适当调整）
      - XLSX_MAX_ROWS=50000              # 🔥 最大行数限制（默认100000，开发环境设为50000）
      - XLSX_MAX_COLS=100                # 🔥 最大列数限制（默认100）
      
      # 🔥 HTTP Transport 配置（开发环境：较小值，便于调试）
      - HTTP_MAX_IDLE_CONNS=30                   # 全局最大空闲连接数
      - HTTP_MAX_IDLE_CONNS_PER_HOST=5           # 每个 host 的最大空闲连接数
      - HTTP_MAX_CONNS_PER_HOST=50               # 每个 host 的最大连接数
      - HTTP_IDLE_CONN_TIMEOUT_SEC=60            # 空闲连接超时（秒）
      - HTTP_DIAL_TIMEOUT_SEC=10                 # 连接建立超时（秒）
      - HTTP_KEEP_ALIVE_SEC=30                   # Keep-Alive 间隔（秒）
      - HTTP_TLS_HANDSHAKE_TIMEOUT_SEC=10        # TLS 握手超时（秒）
      - HTTP_EXPECT_CONTINUE_TIMEOUT_SEC=1       # 期望继续超时（秒）
      - HTTP_FORCE_HTTP2=true                    # 启用 HTTP/2
      - HTTP_RESPONSE_BODY_IDLE_TIMEOUT_MIN=5    # 🔥 响应体空闲超时（分钟，防止资源泄漏）
      
      # ==================== JavaScript 内存限制 ====================
      # 说明：拦截 JavaScript 侧的大内存分配（Array、TypedArray、ArrayBuffer、Array.push）
      # 
      # ENABLE_JS_MEMORY_LIMIT: 是否启用 JS 侧内存限制
      #   - true: 启用（默认）
      #   - false: 禁用（允许无限制创建数组，⚠️ 可能导致内存溢出）
      # 
      # JS_MEMORY_LIMIT_MB: JavaScript 单次分配的最大内存大小（MB）
      #   - 0: 使用 MAX_BLOB_FILE_SIZE_MB 的值（默认，自动跟随）
      #   - >0: 指定具体限制（如 10 = 10MB）
      #   
      # 🔍 Array.push 限制计算：
      #   最大元素数 = (JS_MEMORY_LIMIT_MB * 1024 * 1024) / 8
      #   示例：
      #     - 1MB  → 131,072 个元素（开发环境当前值）
      #     - 10MB → 1,310,720 个元素
      #     - 12MB → 1,572,864 个元素（生产环境推荐）
      # 
      # ⚠️ 注意：
      #   - Array.push 超限时会抛出中文错误："Array.push 操作会导致数组长度超过限制..."
      #   - 其他限制包括：new Array(n)、new Uint8Array(n)、new ArrayBuffer(n)
      - ENABLE_JS_MEMORY_LIMIT=true      # 🔧 启用 JS 侧内存限制（默认：true）
      - JS_MEMORY_LIMIT_MB=0              # 🔧 限制大小（0=使用 MAX_BLOB_FILE_SIZE_MB，当前为1MB → 131K元素）
      
      # ==================== 🔥 健康检查和池管理配置 ====================
      # 开发环境：较宽松的阈值，便于调试
      - MIN_ERROR_COUNT_FOR_CHECK=5              # 最小错误次数阈值（开发环境：5，便于快速发现问题）
      - MAX_ERROR_RATE_THRESHOLD=0.15            # 最大错误率阈值（开发环境：0.15 即 15%，容忍调试错误）
      - MIN_EXECUTION_COUNT_FOR_STATS=500        # 统计长期运行的最小执行次数（开发环境：500，快速进入统计）
      - LONG_RUNNING_THRESHOLD_MINUTES=30        # 长期运行时间阈值（开发环境：30分钟）
      - POOL_EXPANSION_THRESHOLD_PERCENT=0.2     # 池扩展阈值（开发环境：0.2 即 20%，避免频繁扩展）
      - HEALTH_CHECK_INTERVAL_SECONDS=60         # 健康检查间隔（开发环境：60秒，减少日志输出）
      
      # ==================== Go运行时配置 ====================
      - GOMAXPROCS=0                     # 使用所有CPU
      - GOGC=100
      - GOMEMLIMIT=2048MiB
      
      # ==================== 🔍 调试配置 ====================
      - ENABLE_PPROF=true                # 开发环境启用 pprof 接口
      
      # ==================== 🔧 测试工具配置 ====================
      # 测试工具页面配置 - 访问地址: http://localhost:3002/flow/test-tool
      # 开发环境使用本地地址
      - TEST_TOOL_API_URL=http://localhost:3002 
      - TEST_TOOL_LOGO_URL=https://qingflow.com/                                          # API服务地址
      - TEST_TOOL_HELP_URL=https://exiao.yuque.com/rlf3k1/oanb79/fa3tqkxk1h2n912q         # Flow CodeBlock 帮助文档
      - TEST_TOOL_API_DOC_URL=https://exiao.yuque.com/rlf3k1/oanb79/ybd2nfdshmhaihc2      # Flow CodeBlock API 接口文档
      - TEST_TOOL_GUIDE_URL=https://exiao.yuque.com/rlf3k1/oanb79/olsa9bvc6vm2m26c        # Flow CodeBlock 在线测试工具使用指南
      - TEST_TOOL_EXAMPLE_URL=https://exiao.yuque.com/rlf3k1/oanb79/tlty7ic7szfr2v7v     # Flow CodeBlock 代码示例
      - TEST_TOOL_AI_URL=https://wings.qingflow.com/ultron/share/agent/443790716135587842 # 轻翼AI：Flow CodeBlock 代码AI助手
      - TEST_TOOL_APPLY_URL=https://qingflow.com/f/cabirpa60001                          # 申请开通服务链接
      
      # ==================== 🎨 自定义Logo配置 ====================
      # 优先级：CUSTOM_LOGO_URL（最高）> CUSTOM_LOGO_PATH > 默认Logo
      - CUSTOM_LOGO_URL=${CUSTOM_LOGO_URL:-}              # 🎨 自定义Logo外部URL（如CDN链接）
      - CUSTOM_LOGO_PATH=${CUSTOM_LOGO_PATH:-}            # 🎨 自定义Logo本地路径（容器内路径，如：/app/logos/your-logo.png）
    
    restart: "no"  # 开发环境不自动重启，方便调试
    
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # ==================== 🔧 资源限制 ====================
    # 开发环境较宽松的限制
    deploy:
      resources:
        limits:
          memory: 2.5G          # 🔧 2GB足够开发测试
          cpus: '4.0'         # 🔧 4核CPU
        reservations:
          memory: 512M
          cpus: '1.0'
    
    # ==================== 安全配置 ====================
    # 开发环境不启用严格的安全限制
    security_opt:
      - no-new-privileges:true
    # read_only: false      # 开发环境允许写入
    tmpfs:
      - /tmp:size=200m      # 开发环境更大的临时空间
    
    # ==================== 健康检查 ====================
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 15s         # 开发环境更频繁检查
      timeout: 5s
      retries: 2
      start_period: 5s
    
    # ==================== 网络配置 ====================
    networks:
      - flow-dev-network
    
    # ==================== 日志配置 ====================
    logging:
      driver: "json-file"
      options:
        max-size: "10m"     # 开发环境较小的日志文件
        max-file: "2"
    
    # ==================== 卷挂载 ====================
    volumes:
      - /etc/localtime:/etc/localtime:ro
      # 💡 可选：挂载源码目录以支持热重载（需要配合air等工具）
      # - ./:/app:ro
      
      # 🎨 自定义Logo卷挂载（如果使用 CUSTOM_LOGO_PATH）
      # 取消注释下面一行，将宿主机的 logos 目录挂载到容器
      #- ./logos:/app/logos:ro
      # 然后设置环境变量: CUSTOM_LOGO_PATH=/app/logos/your-logo.png
    
    # ==================== 标签 ====================
    labels:
      - "com.flow-codeblock.service=go-executor"
      - "com.flow-codeblock.version=2.1"
      - "com.flow-codeblock.environment=development"
      - "com.flow-codeblock.description=本地测试环境"

  # ====================================================================================
  # MySQL数据库服务 (开发环境)
  # ====================================================================================
  mysql:
    image: mysql:8.0
    container_name: flow-mysql-dev
    environment:
      - MYSQL_ROOT_PASSWORD=root_dev_password
      - MYSQL_DATABASE=flow_codeblock_go
      - MYSQL_USER=flow_user
      - MYSQL_PASSWORD=flow_password_dev
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
    restart: "no"
    
    # 健康检查
    # 说明：不仅检查MySQL服务，还要确保数据库和表已创建（init.sql执行完成）
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u flow_user -pflow_password_dev && mysql -u flow_user -pflow_password_dev flow_codeblock_go -e 'SELECT 1 FROM access_tokens LIMIT 1' > /dev/null 2>&1 || exit 1"]
      timeout: 10s
      retries: 10
      interval: 5s
      start_period: 40s  # 增加启动等待时间，确保init.sql执行完成
    
    # 资源限制（开发环境）
    deploy:
      resources:
        limits:
          memory: 1G        # 🔧 开发环境1GB
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # 网络配置
    networks:
      - flow-dev-network
    
    # 数据持久化
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - /etc/localtime:/etc/localtime:ro
    
    # 日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"
    
    # 标签
    labels:
      - "com.flow-codeblock.service=database"
      - "com.flow-codeblock.environment=development"

  # ====================================================================================
  # Redis缓存服务 (开发环境)
  # ====================================================================================
  redis:
    image: redis:7-alpine
    container_name: flow-redis-dev
    # 🔥 自动启用AOF持久化（配额系统需要）
    command: redis-server --requirepass flow_redis_dev --maxmemory 512mb --maxmemory-policy allkeys-lru --appendonly yes --appendfsync everysec
    restart: "no"
    
    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "flow_redis_dev", "ping"]
      timeout: 3s
      retries: 3
      interval: 10s
      start_period: 5s
    
    # 资源限制（开发环境）
    deploy:
      resources:
        limits:
          memory: 512M      # 🔧 开发环境512MB
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # 网络配置
    networks:
      - flow-dev-network
    
    # 数据持久化（可选，开发环境可以不持久化）
    volumes:
      # - redis_dev_data:/data    # 取消注释以启用数据持久化
      - /etc/localtime:/etc/localtime:ro
    
    # 日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    
    # 标签
    labels:
      - "com.flow-codeblock.service=cache"
      - "com.flow-codeblock.environment=development"

# ====================================================================================
# 网络配置
# ====================================================================================
networks:
  flow-dev-network:
    driver: bridge
    name: flow-dev-network

# ====================================================================================
# 数据卷
# ====================================================================================
volumes:
  mysql_dev_data:
    driver: local
  # redis_dev_data:
  #   driver: local
