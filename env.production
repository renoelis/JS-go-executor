# Flow-CodeBlock Go版本 - 生产环境配置
# ==============================================

# 🚀 JavaScript执行器配置
# RUNTIME_POOL_SIZE: JavaScript Runtime池大小，影响并发能力和内存使用
# 生产环境建议值: 100-500，根据服务器配置和负载调整
RUNTIME_POOL_SIZE=200

# MAX_CONCURRENT_EXECUTIONS: 最大并发执行数，超过此数量的请求将等待
# 生产环境建议设置为RUNTIME_POOL_SIZE的10-20倍
MAX_CONCURRENT_EXECUTIONS=2000

# MAX_CODE_LENGTH: 单次执行的JavaScript代码长度限制（字节）
# 65535 = 64KB，防止过大的代码导致内存问题
MAX_CODE_LENGTH=65535

# MAX_INPUT_SIZE: 输入数据大小限制（字节）
# 2097152 = 2MB，根据业务需求可适当调整
MAX_INPUT_SIZE=2097152

# MAX_RESULT_SIZE: 输出结果大小限制（字节）
# 5242880 = 5MB，防止返回过大的结果影响网络传输
MAX_RESULT_SIZE=5242880

# EXECUTION_TIMEOUT_MS: 单次代码执行超时时间（毫秒）
# 生产环境建议3000-5000ms，平衡性能和用户体验
EXECUTION_TIMEOUT_MS=5000

# 🌐 Fetch API 配置（新方案）

# 🔥 超时配置（拆分为两个独立参数）
# FETCH_TIMEOUT_MS: HTTP 请求超时（连接建立+发送请求+等待响应头）
# 生产环境建议: 30秒（30000ms）- 请求阶段应该快速完成
FETCH_TIMEOUT_MS=30000

# FETCH_RESPONSE_READ_TIMEOUT_MS: 响应读取总时长超时（防止慢速读取攻击）
# 生产环境建议: 5分钟（300000ms）- 支持大文件流式下载
# ⚠️ 如果您的业务只有小文件，可以设为 30-60 秒
FETCH_RESPONSE_READ_TIMEOUT_MS=300000

# 下载限制
# MAX_RESPONSE_SIZE_MB: 缓冲读取限制（arrayBuffer/blob/text/json）
# 生产环境建议: 1MB，防止内存耗尽
MAX_RESPONSE_SIZE_MB=1

# MAX_STREAMING_SIZE_MB: 流式读取限制（getReader）
# 生产环境建议: 10-100MB，防止恶意下载
MAX_STREAMING_SIZE_MB=10

# 上传限制
# MAX_BUFFERED_FORMDATA_MB: 缓冲上传限制（Web FormData + Blob、Node.js form-data + Buffer）
# 生产环境建议: 1MB
MAX_BUFFERED_FORMDATA_MB=1

# MAX_STREAMING_FORMDATA_MB: 流式上传限制（Node.js form-data + Stream）
# 生产环境建议: 10-100MB
MAX_STREAMING_FORMDATA_MB=10

# 🔥 并发控制超时配置
# CONCURRENCY_WAIT_TIMEOUT_SEC: 并发槽位等待超时（秒）
# 生产环境建议: 10-15秒
CONCURRENCY_WAIT_TIMEOUT_SEC=10

# RUNTIME_POOL_ACQUIRE_TIMEOUT_SEC: Runtime 池获取超时（秒）
# 生产环境建议: 5-10秒
RUNTIME_POOL_ACQUIRE_TIMEOUT_SEC=5

# 🔍 慢执行检测配置
# SLOW_EXECUTION_THRESHOLD_MS: 慢执行检测阈值（毫秒）
# 说明：超过此时间的代码执行会记录 WARN 日志，帮助定位性能问题
# 生产环境建议: 1000ms（1秒）- 捕获约 2% 的慢代码
SLOW_EXECUTION_THRESHOLD_MS=1000

# 🔧 Go运行时配置
# GOMAXPROCS: Go可使用的最大处理器数量
# 0 = 使用所有可用CPU核心，生产环境通常不限制
GOMAXPROCS=0

# GOGC: Go垃圾回收器的目标百分比
# 100 = 默认值，生产环境可考虑调整为50-200根据内存情况
GOGC=100

# GIN_MODE: Gin Web框架的运行模式
# release = 生产模式，关闭调试信息，提升性能
GIN_MODE=release

# 🔥 DoS 防护配置
MAX_REQUEST_BODY_MB=10

# 🔒 CORS 跨域配置（生产环境：严格控制，仅允许服务端和同域调用）
# 允许的前端域名列表（逗号分隔），为空则只允许服务端和同域调用
# ⚠️ 生产环境建议为空或仅配置可信域名
ALLOWED_ORIGINS=

# 🔥 HTTP Transport 配置（生产环境：优化性能和安全性）
# 这些配置控制 Fetch API 的底层 HTTP 连接池和超时行为
HTTP_MAX_IDLE_CONNS=100                  # 全局最大空闲连接数（生产环境：较大值，提升性能）
HTTP_MAX_IDLE_CONNS_PER_HOST=20          # 每个 host 的最大空闲连接数（生产环境：较大值）
HTTP_MAX_CONNS_PER_HOST=200              # 每个 host 的最大连接数（生产环境：较大值，防止慢速攻击）
HTTP_IDLE_CONN_TIMEOUT_SEC=90            # 空闲连接超时（秒）
HTTP_DIAL_TIMEOUT_SEC=10                 # 连接建立超时（秒）
HTTP_KEEP_ALIVE_SEC=30                   # Keep-Alive 间隔（秒）
HTTP_TLS_HANDSHAKE_TIMEOUT_SEC=10        # TLS 握手超时（秒）
HTTP_EXPECT_CONTINUE_TIMEOUT_SEC=1       # 期望继续超时（秒）
HTTP_FORCE_HTTP2=true
HTTP_RESPONSE_BODY_IDLE_TIMEOUT_MIN=5                    # 启用 HTTP/2

# 🔥 XLSX 模块配置（生产环境）
# Copy-on-Read 模式的最大文件大小（MB），超过将拒绝并提示使用流式 API
# 生产环境建议保守配置，确保内存安全
XLSX_MAX_SNAPSHOT_SIZE_MB=5

# 🔥 健康检查和池管理配置（生产环境）
MIN_ERROR_COUNT_FOR_CHECK=10            # 生产环境：默认值，避免误判
MAX_ERROR_RATE_THRESHOLD=0.1            # 生产环境：严格（10%），及时发现问题
MIN_EXECUTION_COUNT_FOR_STATS=1000      # 生产环境：较高阈值，确保统计准确性
LONG_RUNNING_THRESHOLD_MINUTES=60       # 生产环境：60分钟视为长期运行
POOL_EXPANSION_THRESHOLD_PERCENT=0.1    # 生产环境：10%时扩展，及时响应负载
HEALTH_CHECK_INTERVAL_SECONDS=30        # 生产环境：30秒检查一次，及时监控

# 🐛 调试配置
# ENABLE_DEBUG_LOGS: 是否启用调试日志
# 生产环境建议设为false，减少日志输出，提升性能
ENABLE_DEBUG_LOGS=false
