# Flow-CodeBlock Go版本 - 生产环境配置
# ==============================================

# ==================== 基础配置 ====================
ENVIRONMENT=production
PORT=3002
GIN_MODE=release

# ==================== 数据库配置 ====================
DB_HOST=mysql
DB_PORT=3306
DB_USER=flow_user
DB_PASSWORD=flow_password_2025
DB_NAME=flow_codeblock_go

# MySQL Docker容器配置（复用上面的数据库配置）
MYSQL_ROOT_PASSWORD=root_password_2025  # MySQL root用户密码（独立配置）
MYSQL_DATABASE=${DB_NAME}                # 复用数据库名
MYSQL_USER=${DB_USER}                    # 复用用户名  
MYSQL_PASSWORD=${DB_PASSWORD}            # 复用用户密码
MYSQL_CHARSET=utf8mb4                    # MySQL字符集
MYSQL_COLLATION=utf8mb4_unicode_ci       # MySQL排序规则

DB_MAX_OPEN_CONNS=100            # 最大打开连接数（并发查询上限）
DB_MAX_IDLE_CONNS=20             # 最大空闲连接数（连接池大小）
DB_CONN_MAX_LIFETIME_MIN=60      # 连接最大生命周期（分钟，防止连接过期）
DB_CONN_MAX_IDLE_TIME_MIN=10     # 空闲连接最大存活时间（分钟，释放长期不用的连接）

# ==================== Redis配置 ====================
REDIS_ENABLED=true
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=flow_redis_2025
REDIS_DB=0
REDIS_POOL_SIZE=100              # Redis连接池大小
REDIS_MIN_IDLE_CONNS=10          # 最小空闲连接数
REDIS_DIAL_TIMEOUT_SEC=5         # 连接超时(秒)
REDIS_READ_TIMEOUT_SEC=3         # 读取超时(秒)
REDIS_WRITE_TIMEOUT_SEC=3        # 写入超时(秒)
REDIS_MAX_RETRIES=3              # 最大重试次数

# ==================== 🔐 认证配置 ====================
# ⚠️ 生产环境必须修改！使用强随机密码！
# 生成方法: openssl rand -base64 32  /  ADMIN_TOKEN=$(uuidgen)
ADMIN_TOKEN=9560D6C9-264A-45E4-B8BF-BF4957860484

# ==================== 🔥 配额日志自动清理配置 ====================
# 功能：自动清理历史配额消耗日志，避免数据库膨胀
# 优势：无需crontab，跨平台，易监控，开箱即用
# 监控API: GET /flow/quota/cleanup/stats
# 手动触发: POST /flow/quota/cleanup/trigger

# 是否启用自动清理（默认：true，推荐启用）
QUOTA_CLEANUP_ENABLED=true

# 日志保留天数（默认：180天，即6个月）
# - 开发环境推荐：90天
# - 生产环境推荐：180天
# - 高流量应用：60-90天
QUOTA_CLEANUP_RETENTION_DAYS=180

# 清理间隔（小时，默认：24小时，即每天清理一次）
# - 低流量应用：168小时（7天）
# - 中等流量应用：24小时（推荐）
# - 高流量应用：12小时
QUOTA_CLEANUP_INTERVAL_HOURS=24

# 每批删除数量（默认：10000）
# - 低性能数据库：5000
# - 中等性能：10000（推荐）
# - 高性能数据库：20000-50000
QUOTA_CLEANUP_BATCH_SIZE=10000

# ==================== 🔥 配额同步配置 ====================
# 功能：配置Redis到DB的配额同步策略
# 说明：配额准确性由Redis原子操作保证，同步间隔只影响DB实时性

# 同步队列容量（默认：10000）
# - 低流量应用：5000
# - 中等流量应用：10000（推荐）
# - 高流量应用：20000-50000
QUOTA_SYNC_QUEUE_SIZE=10000

# 日志队列容量（默认：10000）
# - 低流量应用：5000
# - 中等流量应用：10000（推荐）
# - 高流量应用：20000-50000
QUOTA_LOG_QUEUE_SIZE=10000

# 同步批次大小（默认：500）
# - 低性能数据库：100-200
# - 中等性能：500（推荐）
# - 高性能数据库：1000-2000
QUOTA_SYNC_BATCH_SIZE=500

# 同步间隔（毫秒，默认：1000，即1秒）
# - 低流量应用：5000（5秒）
# - 中等流量应用：1000（1秒，推荐）
# - 高流量应用：500（0.5秒）
# 注意：间隔越短，DB实时性越好，但写入频率越高
QUOTA_SYNC_INTERVAL_MS=1000

# ==================== Token缓存配置 ====================
TOKEN_CACHE_HOT_SIZE=300         # 🔧 热缓存大小 500→300 (内存优化)
TOKEN_CACHE_HOT_TTL_MINUTES=3    # 🔧 热缓存TTL 5→3分钟 (内存优化)
TOKEN_CACHE_REDIS_TTL_MINUTES=30 # 🔧 Redis TTL 60→30分钟 (内存优化)

# ==================== 🔥 缓存写入池配置 ====================
# 说明：统一管理所有异步缓存写入，防止 goroutine 暴涨
CACHE_WRITE_POOL_WORKERS=15      # Worker数量 (推荐:10-20)
CACHE_WRITE_POOL_QUEUE_SIZE=1500 # 队列大小 (推荐:1000-2000)
CACHE_WRITE_POOL_SUBMIT_TIMEOUT_MS=50 # 提交超时(毫秒)

# ==================== Token限流配置 ====================
RATE_LIMIT_HOT_SIZE=300          # 🔧 限流热数据 500→300 (内存优化)
RATE_LIMIT_REDIS_TTL_MINUTES=60  # Redis TTL(分钟)
RATE_LIMIT_BATCH_SIZE=100        # 批量写入大小

# ==================== 🚦 IP限流配置 ====================
# 认证前IP限流（严格）- 防止暴力破解Token
IP_RATE_LIMIT_PRE_AUTH=50        # 每秒请求数 (推荐:50)
IP_RATE_LIMIT_PRE_AUTH_BURST=100 # 突发请求数 (推荐:100)

# 认证后IP限流（宽松）- 防止极端滥用
IP_RATE_LIMIT_POST_AUTH=200      # 每秒请求数 (推荐:200)
IP_RATE_LIMIT_POST_AUTH_BURST=400 # 突发请求数 (推荐:400)

# 全局IP限流（公开端点）
IP_RATE_LIMIT_GLOBAL=50          # 每秒请求数 (推荐:50)
IP_RATE_LIMIT_GLOBAL_BURST=100   # 突发请求数 (推荐:100)

# ==================== 🚀 JavaScript执行器配置 ====================
# 📋 推荐配置:
#   🖥️  2H4G服务器: POOL=50, MAX_CONCURRENT=400, TIMEOUT=120000
#   🖥️  4H8G服务器: POOL=100, MAX_CONCURRENT=800, TIMEOUT=180000
#   🖥️  8H16G服务器: POOL=200, MAX_CONCURRENT=1600, TIMEOUT=300000
# 🔥 当前配置: 6GB内存，支持 200 Runtime
RUNTIME_POOL_SIZE=100            # Runtime池大小 (200 个)
MIN_RUNTIME_POOL_SIZE=50        # 最小池大小 (100 个)
MAX_RUNTIME_POOL_SIZE=100        # 最大池大小 (200 个)
RUNTIME_IDLE_TIMEOUT_MIN=10       # Runtime空闲超时(分钟)
MAX_CONCURRENT_EXECUTIONS=300   # 🔧 最大并发数 (200 Runtime 推荐)，不传系统会动态计算
CODE_CACHE_SIZE=100              # 代码缓存个数大小
ALLOW_CONSOLE=false              # 🔧 生产环境禁用console

# 执行限制
MAX_CODE_LENGTH=65535            # 代码长度限制(字节) - 64KB
MAX_INPUT_SIZE=1048576           # Input大小限制(字节) - 1MB
MAX_RESULT_SIZE=5242880          # 结果大小限制(字节) - 5MB
EXECUTION_TIMEOUT_MS=60000       # 🔧 执行超时(毫秒) - 1分钟（固定）
# ⚠️ 重要：EXECUTION_TIMEOUT 必须大于 FETCH_TIMEOUT + FETCH_RESPONSE_READ_TIMEOUT
#    当前：60秒 > (20秒 + 35秒) = 55秒 ✅

# ==================== HTTP Transport 配置 ====================
# 🔥 HTTP Transport 配置（生产环境：优化性能和安全性）
HTTP_MAX_IDLE_CONNS=100                  # 全局最大空闲连接数（生产环境：较大值）
HTTP_MAX_IDLE_CONNS_PER_HOST=10          # 每个 host 的最大空闲连接数（生产环境：较大值）
HTTP_MAX_CONNS_PER_HOST=50              # 每个 host 的最大连接数（防止慢速攻击）
HTTP_IDLE_CONN_TIMEOUT_SEC=90            # 空闲连接超时（秒）
HTTP_DIAL_TIMEOUT_SEC=10                 # 连接建立超时（秒）
HTTP_KEEP_ALIVE_SEC=30                   # Keep-Alive 间隔（秒）
HTTP_TLS_HANDSHAKE_TIMEOUT_SEC=10        # TLS 握手超时（秒）
HTTP_EXPECT_CONTINUE_TIMEOUT_SEC=1       # 期望继续超时（秒）
HTTP_FORCE_HTTP2=true                    # 启用 HTTP/2
HTTP_RESPONSE_BODY_IDLE_TIMEOUT_SEC=30   # 🔥 响应体空闲超时（30秒，必须 < EXECUTION_TIMEOUT）

# 🌐 Fetch API 配置（新方案）

# ==================== 🛡️ SSRF 防护配置 ====================
# 说明：防止 Server-Side Request Forgery (SSRF) 攻击
# 🔒 智能判断规则：
#   - ENVIRONMENT=production：默认启用 SSRF 防护，禁止访问私有 IP（公有云部署）
#   - ENVIRONMENT=development：默认禁用 SSRF 防护，允许访问私有 IP（本地开发）
#   - 可通过环境变量显式覆盖默认行为

# 是否启用 SSRF 防护（默认：自动判断）
# - true: 启用防护，根据 ALLOW_PRIVATE_IP 决定是否允许私有 IP
# - false: 禁用防护，允许访问所有 IP
# - 未设置: 根据 ENVIRONMENT 自动判断（production=true, development=false）
ENABLE_SSRF_PROTECTION=true

# 是否允许访问私有 IP（默认：自动判断）
# - true: 允许访问内网 IP（127.0.0.1, 10.x, 172.16-31.x, 192.168.x）
# - false: 禁止访问私有 IP，防止 SSRF 攻击
# - 未设置: 根据 ENVIRONMENT 自动判断（production=false, development=true）
# 
# ⚠️ 使用场景：
#   公有云部署（推荐）: ENABLE_SSRF_PROTECTION=true, ALLOW_PRIVATE_IP=false
#   本地/私有云部署: ENABLE_SSRF_PROTECTION=true, ALLOW_PRIVATE_IP=true
#   开发环境: ENABLE_SSRF_PROTECTION=false（或不设置）
ALLOW_PRIVATE_IP=false

# ==================== Fetch API 超时配置 ====================
# 🔥 拆分为两个独立参数（v2.5.3 新增）
# ⚠️ 配置原则（严格遵守）：
#    FETCH_TIMEOUT + FETCH_RESPONSE_READ_TIMEOUT < EXECUTION_TIMEOUT
#    当前：20秒 + 35秒 = 55秒 < 60秒执行超时 ✅
#    留出 5 秒缓冲：用于代码处理数据、JSON 序列化、返回结果
FETCH_TIMEOUT_MS=20000                      # HTTP 请求超时（连接+发送+响应头，20秒）
FETCH_RESPONSE_READ_TIMEOUT_MS=35000        # 🔥 响应读取总时长超时（35秒）

# 🔥 下载限制（新方案）
MAX_RESPONSE_SIZE_MB=10          # 缓冲读取限制(arrayBuffer/blob/text/json) - 生产环境1MB
MAX_STREAMING_SIZE_MB=100        # 流式读取限制(getReader) - 生产环境10MB

# 🔥 上传限制（新方案）
MAX_BUFFERED_FORMDATA_MB=10      # 缓冲上传限制(Web FormData + Blob、Node.js form-data + Buffer) - 生产环境1MB
MAX_STREAMING_FORMDATA_MB=100   # 流式上传限制(Node.js form-data + Stream) - 生产环境10MB

# 其他配置
ENABLE_CHUNKED_UPLOAD=1         # 启用分块传输编码
MAX_BLOB_FILE_SIZE_MB=10        # Blob/File最大大小(MB)
FORMDATA_BUFFER_SIZE=524288     # FormData缓冲区大小(字节) - 512KB
MAX_FILE_SIZE_MB=10             # 单文件最大大小(MB)

# ====================  XLSX 模块配置 ====================
# 🔥 XLSX 模块配置（生产环境）
XLSX_MAX_SNAPSHOT_SIZE_MB=5     # Copy-on-Read 模式的最大文件大小（默认5MB，生产环境保守配置）
XLSX_MAX_ROWS=10000            # 🔥 最大行数限制（默认10000）
XLSX_MAX_COLS=100               # 🔥 最大列数限制（默认100）

# ==================== 🔥 并发控制超时配置 ====================
# 说明：控制系统繁忙时的等待行为
CONCURRENCY_WAIT_TIMEOUT_SEC=10  # 并发槽位等待超时(秒) - 默认 10 秒
RUNTIME_POOL_ACQUIRE_TIMEOUT_SEC=5  # Runtime 池获取超时(秒) - 默认 5 秒

# ==================== 🔍 慢执行检测配置 ====================
# SLOW_EXECUTION_THRESHOLD_MS: 慢执行检测阈值（毫秒）
# 说明：超过此时间的代码执行会记录 WARN 日志，帮助定位性能问题
SLOW_EXECUTION_THRESHOLD_MS=3000  # 配置为 3 秒

# ==================== 🔥 熔断器配置 ====================
# 说明：防止重度过载，保护系统稳定性
CIRCUIT_BREAKER_ENABLED=true     # 是否启用熔断器
CIRCUIT_BREAKER_MIN_REQUESTS=100 # 最小请求数(触发熔断的最小样本)
CIRCUIT_BREAKER_FAILURE_RATIO=0.9 # 失败率阈值 (0.9 = 90%)
CIRCUIT_BREAKER_TIMEOUT_SEC=10   # Open状态持续时间(秒)
CIRCUIT_BREAKER_MAX_REQUESTS=100 # Half-Open状态最大探测请求数


# ==================== JavaScript 内存限制 ====================
# 说明：拦截 JavaScript 侧的大内存分配（Array、TypedArray、ArrayBuffer、Array.push）
# JS_MEMORY_LIMIT_MB: JavaScript 单次分配的最大内存大小（MB）
#   - 0: 使用 MAX_BLOB_FILE_SIZE_MB 的值（默认，自动跟随）
#   - >0: 指定具体限制（如 12 = 12MB）
#   
# 🔍 Array.push 限制计算：
#   最大元素数 = (JS_MEMORY_LIMIT_MB * 1024 * 1024) / 8
# 
# ⚠️ 注意：
#   - Array.push 超限时会抛出中文错误："Array.push 操作会导致数组长度超过限制..."
#   - 其他限制包括：new Array(n)、new Uint8Array(n)、new ArrayBuffer(n)
#   - 生产环境建议保持启用，防止恶意代码或错误代码导致内存溢出
ENABLE_JS_MEMORY_LIMIT=true       # 🔧 启用 JS 侧内存限制（默认：true，生产环境必须启用）
JS_MEMORY_LIMIT_MB=0              # 🔧 限制大小（0=使用 MAX_BLOB_FILE_SIZE_MB，当前为10MB → 1.3M元素）

# ==================== Go运行时配置 ====================
GOMAXPROCS=0                     # 0=使用所有CPU核心
GOGC=100                          # 🔧 GC目标百分比 (100→75，更频繁GC，降低内存峰值)
GOMEMLIMIT=2048MiB

# ==================== 🔥 健康检查和池管理配置 ====================
# 生产环境：严格的阈值，及时发现和响应问题
MIN_ERROR_COUNT_FOR_CHECK=10             # 最小错误次数阈值（生产环境：10，避免误判）
MAX_ERROR_RATE_THRESHOLD=0.1             # 最大错误率阈值（生产环境：0.1 即 10%，及时发现问题）
MIN_EXECUTION_COUNT_FOR_STATS=1000       # 统计长期运行的最小执行次数（生产环境：1000，确保准确性）
LONG_RUNNING_THRESHOLD_MINUTES=60        # 长期运行时间阈值（生产环境：60分钟）
POOL_EXPANSION_THRESHOLD_PERCENT=0.1     # 池扩展阈值（生产环境：0.1 即 10%，及时响应负载）
HEALTH_CHECK_INTERVAL_SECONDS=30         # 健康检查间隔（生产环境：30秒，及时监控）

# ==================== 🔍 调试配置 ====================
# 生产环境默认禁用，需要时可临时启用
ENABLE_PPROF=false               # pprof 性能分析接口 (生产环境建议禁用)

# ==================== 🔧 测试工具配置 ====================
# 测试工具页面配置 - 访问地址: http://your-domain:3002/flow/test-tool
# 可根据部署环境修改这些链接
TEST_TOOL_API_URL=https://api.renoelis.top                                           # API服务地址
TEST_TOOL_HELP_URL=https://exiao.yuque.com/rlf3k1/oanb79/fa3tqkxk1h2n912q         # Flow CodeBlock 帮助文档
TEST_TOOL_API_DOC_URL=https://exiao.yuque.com/rlf3k1/oanb79/ybd2nfdshmhaihc2      # Flow CodeBlock API 接口文档
TEST_TOOL_GUIDE_URL=https://exiao.yuque.com/rlf3k1/oanb79/olsa9bvc6vm2m26c        # Flow CodeBlock 在线测试工具使用指南
TEST_TOOL_EXAMPLE_URL=https://exiao.yuque.com/rlf3k1/oanb79/tlty7ic7szfr2v7v     # Flow CodeBlock 代码示例
TEST_TOOL_AI_URL=https://wings.qingflow.com/ultron/share/agent/443790716135587842 # 轻翼AI：Flow CodeBlock 代码AI助手
TEST_TOOL_APPLY_URL=https://qingflow.com/f/cabirpa60001    
TEST_TOOL_LOGO_URL=https://qingflow.com/                      # 申请开通服务链接
