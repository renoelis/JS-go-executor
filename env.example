# 环境配置
ENVIRONMENT=production

# 服务器配置
PORT=3002
GIN_MODE=release

# 🔥 DoS 防护配置
# MAX_REQUEST_BODY_MB: 最大请求体大小（MB）
# 说明：在 HTTP 层面限制请求体大小，防止超大请求消耗内存
# 理由：Base64(65KB) ≈ 87KB + Input(2MB) + JSON overhead ≈ 2.1MB，10MB 留有充足余量
# 建议值：10MB（默认），可根据实际需求调整
MAX_REQUEST_BODY_MB=10

# 🔒 CORS 跨域配置
# 允许的前端域名列表（逗号分隔），为空则只允许服务端和同域调用
# 示例: https://your-frontend.com,https://another-domain.com
ALLOWED_ORIGINS=

# JavaScript 执行器配置
RUNTIME_POOL_SIZE=100
MIN_RUNTIME_POOL_SIZE=50
MAX_RUNTIME_POOL_SIZE=200
RUNTIME_IDLE_TIMEOUT_MIN=5
MAX_CONCURRENT_EXECUTIONS=1000
MAX_CODE_LENGTH=65535
MAX_INPUT_SIZE=2097152
MAX_RESULT_SIZE=5242880
EXECUTION_TIMEOUT_MS=300000
CODE_CACHE_SIZE=100
ALLOW_CONSOLE=false

# 🔥 并发控制超时配置
# CONCURRENCY_WAIT_TIMEOUT_SEC: 并发槽位等待超时（秒）
# 当系统并发数达到上限时，新请求等待获取执行槽位的最大时间
# 建议值: 5-15秒，默认 10 秒
CONCURRENCY_WAIT_TIMEOUT_SEC=10

# RUNTIME_POOL_ACQUIRE_TIMEOUT_SEC: Runtime 池获取超时（秒）
# 从 Runtime 池获取可用 Runtime 的超时时间，超时后会创建临时 Runtime 继续执行
# 建议值: 3-10秒，默认 5 秒
RUNTIME_POOL_ACQUIRE_TIMEOUT_SEC=5

# 🔍 慢执行检测配置
# SLOW_EXECUTION_THRESHOLD_MS: 慢执行检测阈值（毫秒）
# 说明：超过此时间的代码执行会记录 WARN 日志，帮助定位性能问题
# 建议值：
#   - 性能调优期：500ms - 捕获约 10% 的代码，日志较多，便于优化
#   - 生产环境：1000ms（1秒）- 捕获约 2% 的慢代码，适中
#   - 宽松监控：3000ms（3秒）- 只捕获极慢代码，日志很少
SLOW_EXECUTION_THRESHOLD_MS=1000

# 🔥 熔断器配置（防止重度过载）
CIRCUIT_BREAKER_ENABLED=true           # 是否启用熔断器（默认：true）
CIRCUIT_BREAKER_MIN_REQUESTS=100       # 最小请求数（触发熔断的最小样本，默认：100）
CIRCUIT_BREAKER_FAILURE_RATIO=0.9      # 失败率阈值（0.0-1.0，默认：0.9 即 90%）
CIRCUIT_BREAKER_TIMEOUT_SEC=10         # Open 状态持续时间（秒，默认：10）
CIRCUIT_BREAKER_MAX_REQUESTS=100       # Half-Open 状态最大探测请求数（默认：100）

# 🌐 Fetch API 超时配置（拆分为两个独立参数）

# FETCH_TIMEOUT_MS: HTTP 请求超时（连接建立+发送请求+等待响应头）
# 说明：控制建立连接到接收响应头的时间，不包括读取 body
# 建议值：开发环境 30秒，生产环境 10-30秒
FETCH_TIMEOUT_MS=30000

# FETCH_RESPONSE_READ_TIMEOUT_MS: 响应读取总时长超时（防止慢速读取攻击）
# 说明：从开始读取 body 到完成的总时间限制，防止恶意慢速读取占用连接
# 建议值：开发环境 10分钟（方便调试），生产环境 5分钟
# ⚠️ 如果业务只有小文件（< 10MB），可以设为 30-60 秒
FETCH_RESPONSE_READ_TIMEOUT_MS=600000
MAX_FORMDATA_SIZE_MB=100
FORMDATA_STREAMING_THRESHOLD_MB=1
ENABLE_CHUNKED_UPLOAD=1
# 🔥 下载限制（新方案）
MAX_RESPONSE_SIZE_MB=1
MAX_STREAMING_SIZE_MB=100

# 🔥 上传限制（新方案）
MAX_BUFFERED_FORMDATA_MB=1
MAX_STREAMING_FORMDATA_MB=100

# 其他配置
MAX_BLOB_FILE_SIZE_MB=100
FORMDATA_BUFFER_SIZE=2097152
MAX_FILE_SIZE_MB=50

# 🔥 XLSX 模块配置（新增）
# XLSX_MAX_SNAPSHOT_SIZE_MB: Copy-on-Read 模式的最大文件大小（MB）
# 说明：xlsx.read() 会将整个文件加载到内存（快照模式），超过此限制将拒绝并提示使用流式 API
# 理由：防止大文件导致内存积压和 OOM，同时为小文件提供最佳性能
# 推荐值：
#   - 低内存环境（< 4GB）: 2MB
#   - 标准环境（4-8GB）: 5MB（默认）
#   - 高内存环境（> 16GB）: 10MB
# 注意：流式 API (readStream/readBatches) 不受此限制，可处理任意大小文件
XLSX_MAX_SNAPSHOT_SIZE_MB=5

# XLSX_MAX_ROWS: 最大行数限制
# 说明：防止处理超大行数的Excel文件导致内存溢出
# 推荐值：
#   - 低内存环境（< 4GB）: 50000
#   - 标准环境（4-8GB）: 100000（默认）
#   - 高内存环境（> 16GB）: 200000
# 注意：流式 API (readStream) 也会受此限制，但可以提前中断处理
XLSX_MAX_ROWS=100000

# XLSX_MAX_COLS: 最大列数限制
# 说明：防止处理超多列的Excel文件导致内存溢出
# 推荐值：50-200，默认：100
# 注意：一般Excel文件列数较少，此限制主要防止恶意构造的文件
XLSX_MAX_COLS=100

# 🔥 HTTP Transport 配置（新增）
# 这些配置控制 Fetch API 的底层 HTTP 连接池和超时行为
# HTTP_MAX_IDLE_CONNS: 全局最大空闲连接数（默认：50）
# 说明：控制整个连接池的最大空闲连接数，避免占用过多资源
# 建议值：小型应用 20-50，大型应用 50-200
HTTP_MAX_IDLE_CONNS=50

# HTTP_MAX_IDLE_CONNS_PER_HOST: 每个 host 的最大空闲连接数（默认：10）
# 说明：控制单个域名的空闲连接数，提高连接复用效率
# 建议值：5-20，根据单个域名的并发请求数调整
HTTP_MAX_IDLE_CONNS_PER_HOST=10

# HTTP_MAX_CONNS_PER_HOST: 每个 host 的最大连接数（默认：100）
# 说明：限制单个域名的最大连接数，防止慢速攻击和资源耗尽
# 建议值：50-200，根据目标服务器的并发能力调整
HTTP_MAX_CONNS_PER_HOST=100

# HTTP_IDLE_CONN_TIMEOUT_SEC: 空闲连接超时（秒，默认：90）
# 说明：空闲连接保持多久后关闭，避免长时间占用资源
# 建议值：60-120 秒
HTTP_IDLE_CONN_TIMEOUT_SEC=90

# HTTP_DIAL_TIMEOUT_SEC: 连接建立超时（秒，默认：10）
# 说明：TCP 连接建立的超时时间，防止连接卡住
# 建议值：5-15 秒
HTTP_DIAL_TIMEOUT_SEC=10

# HTTP_KEEP_ALIVE_SEC: Keep-Alive 间隔（秒，默认：30）
# 说明：TCP Keep-Alive 探测间隔，保持长连接活跃
# 建议值：15-60 秒
HTTP_KEEP_ALIVE_SEC=30

# HTTP_TLS_HANDSHAKE_TIMEOUT_SEC: TLS 握手超时（秒，默认：10）
# 说明：HTTPS 握手的超时时间，防止握手卡住
# 建议值：5-15 秒
HTTP_TLS_HANDSHAKE_TIMEOUT_SEC=10

# HTTP_EXPECT_CONTINUE_TIMEOUT_SEC: 期望继续超时（秒，默认：1）
# 说明：发送大请求体前等待 100-Continue 响应的时间
# 建议值：1-3 秒
HTTP_EXPECT_CONTINUE_TIMEOUT_SEC=1

# HTTP_FORCE_HTTP2: 启用 HTTP/2（默认：true）
# 说明：是否尝试使用 HTTP/2 协议，提升性能
# 建议值：true（推荐启用）
HTTP_FORCE_HTTP2=true

# HTTP_RESPONSE_BODY_IDLE_TIMEOUT_MIN: 响应体空闲超时（分钟，默认：5）
# 说明：HTTP 响应体的空闲超时时间，防止用户忘记读取 body 导致连接泄漏
# 场景：用户调用 fetch() 后不读取 response.body，导致 HTTP 连接未释放
# 修复：超时后自动关闭 response.body 和底层连接
# 建议值：3-10 分钟，默认 5 分钟
# 注意：正常读取时会自动重置超时，不影响大文件下载
HTTP_RESPONSE_BODY_IDLE_TIMEOUT_MIN=5

# 🔥 JavaScript 内存限制配置
# 说明：拦截 JavaScript 侧的大内存分配，防止内存溢出和OOM
# 影响范围：Array 构造函数、TypedArray、ArrayBuffer、Array.push 等

# ENABLE_JS_MEMORY_LIMIT: 是否启用 JavaScript 侧内存限制
# 说明：控制是否拦截 JavaScript 的大内存分配操作
# 建议值：
#   - 开发环境：true（便于发现内存问题）
#   - 生产环境：true（必须启用，防止恶意代码或错误代码导致OOM）
# 默认值：true
ENABLE_JS_MEMORY_LIMIT=true

# JS_MEMORY_LIMIT_MB: JavaScript 单次分配的最大内存大小（MB）
# 说明：限制 JavaScript 单次可分配的最大内存
# 配置：
#   - 0: 使用 MAX_BLOB_FILE_SIZE_MB 的值（默认，自动跟随）
#   - >0: 指定具体限制（如 10 = 10MB）
# 
# 🔍 Array.push 限制计算公式：
#   最大元素数 = (JS_MEMORY_LIMIT_MB * 1024 * 1024) / 8
#   
# 示例：
#   - 1MB  → 131,072 个元素
#   - 10MB → 1,310,720 个元素
#   - 12MB → 1,572,864 个元素
#   - 50MB → 6,553,600 个元素
# 
# ⚠️ 错误提示：
#   - Array.push 超限时会抛出："Array.push 操作会导致数组长度超过限制..."
#   - 其他限制包括：new Array(n)、new Uint8Array(n)、new ArrayBuffer(n)
# 
# 推荐值：
#   - 开发环境：0（使用 MAX_BLOB_FILE_SIZE_MB）
#   - 生产环境：0 或 10-50MB（根据业务需求调整）
# 默认值：0
JS_MEMORY_LIMIT_MB=0

# 🔥 健康检查和池管理配置
# MIN_ERROR_COUNT_FOR_CHECK: 最小错误次数阈值
# 说明：只有当错误次数 >= 此值时，才会触发错误率检查
# 目的：避免在样本量过小时误判（例如只执行 1 次就出错）
# 建议值：5-20，默认：10
MIN_ERROR_COUNT_FOR_CHECK=10

# MAX_ERROR_RATE_THRESHOLD: 最大错误率阈值
# 说明：当错误率超过此值时，系统会判定为异常状态（0.0-1.0，0.1 表示 10%）
# 目的：及时发现系统健康问题
# 建议值：0.05-0.2（即 5%-20%），默认：0.1（10%）
MAX_ERROR_RATE_THRESHOLD=0.1

# MIN_EXECUTION_COUNT_FOR_STATS: 统计长期运行的最小执行次数
# 说明：只有当总执行次数 >= 此值时，才开始统计长期运行数据
# 目的：确保统计数据的有效性和准确性
# 建议值：500-2000，默认：1000
MIN_EXECUTION_COUNT_FOR_STATS=1000

# LONG_RUNNING_THRESHOLD_MINUTES: 长期运行时间阈值（分钟）
# 说明：判断系统是否已经长期运行的时间标准
# 目的：区分系统启动初期和稳定运行期的不同表现
# 建议值：30-120 分钟，默认：60 分钟
LONG_RUNNING_THRESHOLD_MINUTES=60

# POOL_EXPANSION_THRESHOLD_PERCENT: 池扩展阈值百分比
# 说明：当运行时池的可用槽位低于此百分比时，触发池扩展（0.0-1.0，0.1 表示 10%）
# 目的：动态扩展资源池，避免资源不足导致的性能下降
# 建议值：0.05-0.2（即 5%-20%），默认：0.1（10%）
POOL_EXPANSION_THRESHOLD_PERCENT=0.1

# HEALTH_CHECK_INTERVAL_SECONDS: 健康检查间隔（秒）
# 说明：每隔此时间执行一次系统健康检查
# 目的：定期监控系统状态，及时发现问题
# 建议值：15-60 秒，默认：30 秒
HEALTH_CHECK_INTERVAL_SECONDS=30

# Go 运行时配置
GOMAXPROCS=0
GOGC=100

# ==================== 数据库配置 ====================
DB_HOST=localhost
DB_PORT=3306
DB_USER=flow_user
DB_PASSWORD=flow_password
DB_NAME=flow_codeblock_go
DB_MAX_OPEN_CONNS=100
DB_MAX_IDLE_CONNS=20
DB_CONN_MAX_LIFETIME_MIN=60
DB_CONN_MAX_IDLE_TIME_MIN=10

# ==================== Redis配置 ====================
REDIS_ENABLED=true
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0
REDIS_POOL_SIZE=100
REDIS_MIN_IDLE_CONNS=10
REDIS_DIAL_TIMEOUT_SEC=5
REDIS_READ_TIMEOUT_SEC=3
REDIS_WRITE_TIMEOUT_SEC=3
REDIS_MAX_RETRIES=3

# ==================== 认证配置 ====================
# 🔒 管理员Token（必需，用于访问管理接口）
# 
# ⚠️ 安全要求：
#   - 必须设置（不能为空，服务启动时会验证）
#   - 长度至少 16 个字符
#   - 必须使用强随机密码
#   - 绝不使用默认值、弱密码或包含 "admin"、"password"、"qingflow" 等常见词汇
#
# 📝 生成强密码（推荐方法）：
#   方法1（推荐）: openssl rand -base64 32
#   方法2: pwgen -s 32 1
#   方法3: 使用密码管理器（如 1Password、LastPass）生成
#
# 🔐 管理接口包括：
#   - Token 管理（创建/更新/删除/查询）
#   - 系统监控（健康检查、统计信息）
#   - 缓存管理（清空缓存、限流缓存）
#
# ⛔ 不安全的示例（请勿使用）：
#   ADMIN_TOKEN=qingflow7676          ❌ 旧默认值，已知漏洞
#   ADMIN_TOKEN=admin123              ❌ 包含弱密码
#   ADMIN_TOKEN=password              ❌ 常见密码
#   ADMIN_TOKEN=test                  ❌ 长度不足
#
# ✅ 安全的示例（生产环境请替换为自己生成的）：
#   ADMIN_TOKEN=J7k9mP2nQ5wX8vB3cD6fG1hL4sA0tY9uE
#
# 📌 请在下方设置您的强随机Token：
ADMIN_TOKEN=

TOKEN_CACHE_HOT_SIZE=500
TOKEN_CACHE_HOT_TTL_MINUTES=5
TOKEN_CACHE_REDIS_TTL_MINUTES=60

# 🔥 缓存写入池配置
# 说明：统一管理所有异步缓存写入，防止 goroutine 暴涨
CACHE_WRITE_POOL_WORKERS=15                # Worker 数量（推荐：10-20，默认：15）
CACHE_WRITE_POOL_QUEUE_SIZE=1500           # 队列大小（推荐：1000-2000，默认：1500）
CACHE_WRITE_POOL_SUBMIT_TIMEOUT_MS=50      # 提交超时（毫秒，推荐：50-100，默认：50）

# ==================== Token 限流配置 ====================
RATE_LIMIT_HOT_SIZE=500                    # Token限流热数据层大小
RATE_LIMIT_REDIS_TTL_MINUTES=60            # Token限流Redis TTL（分钟）
RATE_LIMIT_BATCH_SIZE=100                  # Token限流批量写入大小
RATE_LIMIT_DEFAULT_PER_MINUTE=60           # 默认每分钟限制（已废弃）
RATE_LIMIT_DEFAULT_BURST=10                # 默认突发限制（已废弃）
RATE_LIMIT_DEFAULT_WINDOW_SECONDS=60       # 默认时间窗口（已废弃）

# ==================== IP 限流配置 ====================
# 🔥 认证前 IP 限流（严格）- 防止暴力破解 Token
# 目标：防止单个 IP 尝试大量无效 Token
# 推荐配置：50 QPS 可以平衡安全性和用户体验
IP_RATE_LIMIT_PRE_AUTH=50          # 每秒允许的请求数（推荐：50，最低：10）
IP_RATE_LIMIT_PRE_AUTH_BURST=100   # 突发允许的请求数（推荐：100，最低：20）

# 🔥 认证后 IP 限流（宽松）- 防止极端滥用，不影响 Token 配额
# 目标：只防止极端滥用（例如单 IP 超过 200 QPS），不限制正常用户
# 注意：此限制应该比最高的 Token 配额更宽松
IP_RATE_LIMIT_POST_AUTH=200        # 每秒允许的请求数（默认：200）
IP_RATE_LIMIT_POST_AUTH_BURST=400  # 突发允许的请求数（默认：400）

# 🔥 全局 IP 限流（用于公开端点）
# 目标：保护健康检查等公开端点
IP_RATE_LIMIT_GLOBAL=50            # 每秒允许的请求数（默认：50）
IP_RATE_LIMIT_GLOBAL_BURST=100     # 突发允许的请求数（默认：100）

# ==================== 测试工具配置 ====================
# 测试工具页面配置（可选，有默认值）
# 访问地址：http://your-domain:port/flow/test-tool
TEST_TOOL_API_URL=http://localhost:3002
TEST_TOOL_HELP_URL=https://exiao.yuque.com/ixwxsb/cqfg2y/or5052bo2dtukro2
TEST_TOOL_API_DOC_URL=https://exiao.yuque.com/rlf3k1/oanb79/ybd2nfdshmhaihc2
TEST_TOOL_GUIDE_URL=https://exiao.yuque.com/rlf3k1/oanb79/olsa9bvc6vm2m26c
TEST_TOOL_EXAMPLE_URL=https://exiao.yuque.com/rlf3k1/oanb79/tlty7ic7szfr2v7v?singleDoc#
TEST_TOOL_AI_URL=https://qingflow.com/pc-ultron/share/agent/289302286342078465
TEST_TOOL_APPLY_URL=https://qingflow.com/f/9cah24om6402